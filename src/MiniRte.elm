module MiniRte exposing
    ( init, Rte, Parameters, subscriptions, update
    , textarea, display, DisplayParams
    , emojiBox, EmojiBoxParams, fontSelector, FontSelectorParams
    , fontSizeSelector, FontSizeSelectorParams, inputBox, InputBoxParams
    , onOffSwitch, SwitchParams
    , isActive, textContent
    , decodeContentString
    , decodeContentGZip
    , encodeContentString
    , encodeContentGZip
    )

{-|


# Init and update

@docs init, Rte, Parameters, subscriptions, update


# View

@docs textarea, display, DisplayParams


# Toolbar

@docs emojiBox, EmojiBoxParams, fontSelector, FontSelectorParams
@docs fontSizeSelector, FontSizeSelectorParams, inputBox, InputBoxParams
@docs onOffSwitch, SwitchParams


# Serialize/deserialize content

@docs encodeContentString, encodeContentGZip, decodeContentString, decodeContentGZip


# Info

@docs isActive, textContent

-}

import Browser.Dom as Dom
import Bytes exposing (Bytes)
import Css exposing (..)
import Css.Transitions exposing (transition)
import Html exposing (Html)
import Html.Attributes
import Html.Styled exposing (div, text)
import Html.Styled.Attributes exposing (css)
import Html.Styled.Events
import Json.Decode as Decode exposing (Decoder)
import MiniRte.Common as Common
import MiniRte.Core
import MiniRte.Styled as Styled
import MiniRte.Types as Types exposing (Child(..), Content, InputBox(..))
import MiniRte.TypesThatAreNotPublic as HiddenTypes
import Task



--== Main types ==--


{-| -}
type alias Rte msg =
    { emojiBox : Bool
    , inputBox : Maybe InputBox
    , styling :
        { active : List (Html.Attribute msg)
        , inactive : List (Html.Attribute msg)
        }
    , tagger : Msg -> msg
    , textarea : MiniRte.Core.Editor
    }


type alias RteStyled msg =
    Styled.Rte msg


type alias Msg =
    Types.Msg



--== Subsidiary types ==--


{-| `content` can be plain text or a json string created with [encodedContent](#encodedContent).

`fontSizeUnit` defaults to `"px"`.

`indentUnit` defaults to `(50,"px")`.

The attributes in `styling` will be attached to the div that contains the text.

-}
type alias DisplayParams msg =
    { content : String
    , fontSizeUnit : Maybe String
    , highlighter : Maybe (Types.Content -> Types.Content)
    , id : String
    , indentUnit : Maybe ( Float, String )
    , styling : List (Html.Attribute msg)
    }


{-| -}
type alias EmojiBoxParams msg =
    { styling :
        { active : List (Html.Attribute msg)
        , inactive : List (Html.Attribute msg)
        }
    , emojis : List String
    }


{-| -}
type alias FontSelectorParams msg =
    { styling : List (Html.Attribute msg)
    , fonts : List (List String)
    }


{-| -}
type alias FontSizeSelectorParams msg =
    { styling : List (Html.Attribute msg)
    , sizes : List Float
    }


{-| -}
type alias InputBoxParams msg =
    { styling :
        { active : List (Html.Attribute msg)
        , inactive : List (Html.Attribute msg)
        }
    }


{-| `id` must be unique; it is used to monitor the position of characters.

`content` is the initial content of the textarea. It can be `Just` some plain text or a json string generated by [encodedContent](#encodedContent).

`fontSizeUnit` defaults to `"px"`.

`highlighter` runs before each view update and it re-styles the text. See the [Content](MiniRte-Types#Content) type and the [example](https://github.com/dkodaj/rte/tree/master/example).

`indentUnit` defaults to `(50,"px")`.

`selectionStyle` controls the appearance of selected text. It defaults to `[("background", "hsl(217,71%,53%)"), ("color", "white")]`.

`styling.active` styles the textarea div in active mode (when editing). Use `update (Active True/False)` to switch between modes.

`tagger` turns the package's own [Msg](MiniRte-Types#Msg) type into your app's msg.

-}
type alias Parameters msg =
    { id : String
    , content : Types.Content
    , fontSizeUnit : Maybe String
    , highlighter : Maybe (Types.Content -> Types.Content)
    , indentUnit : Maybe ( Float, String )
    , pasteImageLinksAsImages : Bool
    , pasteLinksAsLinks : Bool
    , selectionStyle : List ( String, String )
    , styling :
        { active : List (Html.Attribute msg)
        , inactive : List (Html.Attribute msg)
        }
    , tagger : Msg -> msg
    }


{-| -}
type alias SwitchParams =
    { activeColor : String
    , inactiveColor : String
    , width : Float
    }



--== Main functions ==--


{-| -}
init : Parameters msg -> ( Rte msg, Cmd msg )
init =
    Common.init


{-| -}
subscriptions : Rte msg -> Sub msg
subscriptions =
    Common.subscriptions


{-| -}
update : Msg -> Rte msg -> ( Rte msg, Cmd msg )
update =
    Common.update



--== Helpers in ABC order ==--

{-| Convert serialized content string back into content.
-}
decodeContentString : String -> Result String Content
decodeContentString =
    MiniRte.Core.decodeContentString

{-| Convert gzipped serialized content back into content.
-}
decodeContentGZip : Bytes -> Result String Content
decodeContentGZip =
    MiniRte.Core.decodeContentGZip


{-| Display formatted text, without an editor.

If you want to preserve the option of editing it, create an editor with [init](#init) and put it in passive mode with `update (Active False)`.

-}
display : (Msg -> msg) -> DisplayParams msg -> Html msg
display tagger p =
    let
        styledParams =
            { content = p.content
            , fontSizeUnit = p.fontSizeUnit
            , highlighter = p.highlighter
            , id = p.id
            , indentUnit = p.indentUnit
            , styling = tostyled p.styling
            }
    in
    Html.Styled.toUnstyled <|
        Styled.display tagger styledParams

{-| Serialize the edited text as string.
-}
encodeContentString : Rte msg -> String
encodeContentString =
    MiniRte.Core.encodeContentString

{-| Serialize the edited text as a gzip file.
-}
encodeContentGZip : Rte msg -> Bytes
encodeContentGZip =
    MiniRte.Core.encodeContentGZip


{-| Make it appear/disappear with `update ToggleEmojiBox`.
Each `x` in `params.emojis` turns into a clickable div that triggers `update AddText` events.
-}
emojiBox : Rte msg -> EmojiBoxParams msg -> Html msg
emojiBox rte params =
    let
        styledParams =
            { emojis = params.emojis
            , styling = tostyled3 params.styling
            }
    in
    Html.Styled.toUnstyled <|
        Styled.emojiBox (tostyled2 rte) styledParams



{-| A `Html.select` element that triggers `update Font` events.
-}
fontSelector : Rte msg -> FontSelectorParams msg -> Html msg
fontSelector rte params =
    let
        styledParams =
            { fonts = params.fonts
            , styling = tostyled params.styling
            }
    in
    Html.Styled.toUnstyled <|
        Styled.fontSelector (tostyled2 rte) styledParams


{-| A `Html.select` element that triggers `update FontSize` events.
-}
fontSizeSelector : Rte msg -> FontSizeSelectorParams msg -> Html msg
fontSizeSelector rte params =
    let
        styledParams =
            { sizes = params.sizes
            , styling = tostyled params.styling
            }
    in
    Html.Styled.toUnstyled <|
        Styled.fontSizeSelector (tostyled2 rte) styledParams


{-| Input box for adding hyperlinks and image links.
Make it appear/disappear with `update ToggleImageBox` or `update ToggleLinkBox`.
It contains an OK button that triggers `update ImageAdd` or `update LinkAdd`.
-}
inputBox : Rte msg -> InputBoxParams msg -> Html msg
inputBox rte params =
    Html.Styled.toUnstyled <|
        Styled.inputBox
            (tostyled2 rte)
            { styling = tostyled3 params.styling }


{-| Checks if the editor is active.
-}
isActive : Rte msg -> Bool
isActive rte =
    rte.textarea.state == HiddenTypes.Edit


{-| A switch that turns editing on/off. The `params.width` field controls its width in px.
-}
onOffSwitch : Rte msg -> SwitchParams -> Html msg
onOffSwitch rte params =
    Styled.onOffSwitch (tostyled2 rte) params
    |> Html.Styled.toUnstyled


{-| The plain text content of the textarea.
-}
textContent : Rte msg -> String
textContent rte =
    MiniRte.Core.toText rte.textarea.content


{-| Displays the edited text plus the cursor.
-}
textarea : Rte msg -> Html msg
textarea rte =
    Html.Styled.toUnstyled <| Styled.textarea (tostyled2 rte)


tostyled : List (Html.Attribute msg) -> List (Html.Styled.Attribute msg)
tostyled =
    List.map Html.Styled.Attributes.fromUnstyled


tostyled2 : Rte msg -> RteStyled msg
tostyled2 rte =
    { emojiBox = rte.emojiBox
    , inputBox = rte.inputBox
    , styling = tostyled3 rte.styling
    , tagger = rte.tagger
    , textarea = rte.textarea
    }


type alias Styling msg =
    { active : List (Html.Attribute msg)
    , inactive : List (Html.Attribute msg)
    }


type alias StyledStyling msg =
    { active : List (Html.Styled.Attribute msg)
    , inactive : List (Html.Styled.Attribute msg)
    }


tostyled3 : Styling msg -> StyledStyling msg
tostyled3 a =
    { active = tostyled a.active
    , inactive = tostyled a.inactive
    }


